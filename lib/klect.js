// Generated by CoffeeScript 1.7.1
(function() {
  var Klect, KlectCollection, glob, minimatch, path, _;

  _ = require('lodash');

  glob = require('glob');

  minimatch = require('minimatch');

  path = require('path');

  KlectCollection = function() {
    var arr;
    arr = [];
    arr.push.apply(arr, arguments);
    arr.__proto__ = KlectCollection.prototype;
    return arr;
  };

  KlectCollection.prototype = new Array;

  KlectCollection.prototype.methods = function(method) {
    var item, _ref;
    return (_ref = []).concat.apply(_ref, (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        _results.push(item[method]());
      }
      return _results;
    }).call(this));
  };

  KlectCollection.prototype.html = function() {
    return this.methods('html');
  };

  KlectCollection.prototype.files = function() {
    var item, _ref;
    return (_ref = []).concat.apply(_ref, (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        item = this[_i];
        _results.push(item.files);
      }
      return _results;
    }).call(this));
  };

  Klect = (function() {
    function Klect(config) {
      var _base, _base1;
      if (config == null) {
        config = {};
      }
      this._config = config;
      this._bundles = {};
      if ((_base = this._config).cwd == null) {
        _base.cwd = path.dirname(module.parent.filename) || "./";
      }
      if ((_base1 = this._config).htmlcwd == null) {
        _base1.htmlcwd = "/";
      }
      this;
    }

    Klect.prototype.html = function() {
      var key, val;
      return KlectCollection.apply(new KlectCollection(), (function() {
        var _ref, _results;
        _ref = this._bundles;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push(val);
        }
        return _results;
      }).call(this)).html();
    };

    Klect.prototype.files = function() {
      var key, val;
      return KlectCollection.apply(new KlectCollection(), (function() {
        var _ref, _results;
        _ref = this._bundles;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push(val);
        }
        return _results;
      }).call(this)).files();
    };

    Klect.prototype.gather = function(obj) {
      var bundle, file, files, found, isForced, key, name, val, _config, _gathered, _i, _len, _ref, _ref1, _uniques;
      _gathered = [];
      if (_.isArray(obj)) {
        obj = {
          _: obj
        };
      }
      for (name in obj) {
        files = obj[name];
        _gathered.push(name);
        bundle = this._bundles[name] = {
          name: name,
          files: []
        };
        _config = this._config;
        Object.defineProperty(bundle, 'html', {
          enumerable: false,
          value: function() {
            var file, _i, _len, _ref, _results;
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              file = _ref[_i];
              _results.push(path.join(_config.htmlcwd, file));
            }
            return _results;
          }
        });
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          file = file.replace(/^http(s)?:/, '');
          if (isForced = /^\!/.test(file)) {
            file = file.replace(/^\!/, '');
          }
          _uniques = isForced ? [] : (_ref = []).concat.apply(_ref, (function() {
            var _ref, _results;
            _ref = this._bundles;
            _results = [];
            for (key in _ref) {
              val = _ref[key];
              _results.push(val.files);
            }
            return _results;
          }).call(this));
          found = file.substr(0, 2) === '//' ? [file] : _.difference(glob.sync(file, {
            cwd: this._config.cwd,
            nonegate: true
          }), _uniques);
          (_ref1 = bundle.files).push.apply(_ref1, found);
        }
      }
      return this;
    };

    Klect.prototype.bundles = function(name) {
      var bundles, match, matches;
      matches = minimatch.match(Object.keys(this._bundles), name, {
        nonull: false
      });
      bundles = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          match = matches[_i];
          _results.push(this._bundles[match]);
        }
        return _results;
      }).call(this);
      return KlectCollection.apply(new KlectCollection(), bundles);
    };

    return Klect;

  })();

  module.exports = Klect;

}).call(this);
